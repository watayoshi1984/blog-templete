# 🎯 プロジェクト全体のコーディングルール

## 🧩 コンポーネント設計原則
1. **Atomic Design**に基づき、コンポーネントを以下の階層で構成する：
   - Atoms: 最小単位のUI要素（Button, Inputなど）
   - Molecules: Atomsを組み合わせた複合コンポーネント（Form, Cardなど）
   - Organisms: Moleculesを組み合わせたセクション単位（Header, Footerなど）
   - Templates: ページの骨格
   - Pages: 完成形のページ

2. **Props設計**：
   - 必須プロパティは`required: true`を指定
   - デフォルト値は`defaultProps`ではなく、デフォルト引数で定義
   - 複雑なPropsはZodでバリデーション

## 🧠 状態管理ガイドライン
1. **zustand**を使用した状態管理：
   - ストアは`lib/store.ts`に集約
   - ストア名は`use[Feature]Store`形式
   - 状態更新はimmerを使用して不変性を保証

2. **グローバル状態の最小化**：
   - コンポーネントローカルな状態はuseStateを使用
   - 複数コンポーネント間で共有する状態のみzustandを使用

## 🛠 型定義のベストプラクティス
1. **TypeScript設定**：
   - strictモードを有効化
   - noImplicitAnyを有効化
   - 型定義は`types/`ディレクトリに集約

2. **Utility Types活用**：
   - Pick, Omit, Partialを適切に使用
   - 複雑な型はtypeではなくinterfaceで定義

## 🧪 テスト戦略
1. **テストレベル**：
   - 単体テスト：Jest + Testing Library
   - E2Eテスト：Cypress
   - スナップショットテスト：Storybook

2. **テストカバレッジ**：
   - 主要コンポーネント：80%以上
   - ユーティリティ関数：100%

## 🎨 コードフォーマット
1. **Prettier設定**：
   - printWidth: 100
   - singleQuote: true
   - trailingComma: 'all'
   - tabWidth: 2

2. **ESLintルール**：
   - react-hooks/exhaustive-depsを有効化
   - no-consoleを警告レベル
   - import/orderでimport順序を統一

## 🚀 パフォーマンス最適化
1. **コンポーネント最適化**：
   - React.memoで不必要な再レンダリングを防止
   - useCallbackでコールバック関数をメモ化
   - 重い計算はuseMemoでキャッシュ

2. **バンドルサイズ削減**：
   - 動的importでコード分割
   - 未使用の依存関係を定期的に削除
   - Tree Shakingが効くようにES Modules形式でimport

## 🔒 セキュリティガイドライン
1. **入力検証**：
   - 全てのユーザー入力はZodで検証
   - エラーメッセージは具体的で情報漏洩を防ぐ

2. **認証・認可**：
   - JWTトークンはHttpOnly Cookieで保存
   - 機密情報は.envファイルで管理
   - ロールベースのアクセス制御を実装

## 📝 ドキュメンテーション
1. **Storybook**：
   - 全てのUIコンポーネントをドキュメント化
   - インタラクティブなプロパティ設定を提供

2. **JSDoc**：
   - 公開APIにはJSDocコメントを記載
   - 型情報と使用例を明記

## 🔄 バージョン管理
1. **Git Flow**：
   - main: 本番環境用
   - develop: 開発用
   - feature/*: 新機能開発
   - release/*: リリース準備
   - hotfix/*: 緊急修正

2. **コミットメッセージ**：
   - 絵文字プレフィックスを使用
   - タイプ: タイトル形式で記載
   - 本文に変更理由と影響範囲を記載
