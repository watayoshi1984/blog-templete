---
import * as interfaces from '../../lib/interfaces.ts'
import { buildHeadingId } from '../../lib/blog-helpers.ts'
import { snakeToKebab } from '../../lib/style-helpers.ts'
import '../../styles/notion-color.css'

export interface Props {
  block: interfaces.Block
  headings: interfaces.Block[]
}

const { block, headings } = Astro.props
---

<div class="table-of-contents">
  {
    headings.map((headingBlock: interfaces.Block) => {
      const heading =
        headingBlock.Heading1 || headingBlock.Heading2 || headingBlock.Heading3

      let indentClass = ''
      if (headingBlock.Type === 'heading_2') {
        indentClass = 'indent-1'
      } else if (headingBlock.Type === 'heading_3') {
        indentClass = 'indent-2'
      }

      return (
        <a
          href={`#${buildHeadingId(heading)}`}
          class={`table-of-contents ${snakeToKebab(
            block.TableOfContents.Color
          )} ${indentClass}`}
        >
          {heading.RichTexts.map(
            (richText: interfaces.RichText) => richText.PlainText
          ).join('')}
        </a>
      )
    })
  }
</div>

<style>
  .table-of-contents {
    margin: 1.5rem 0;
    padding: 1.2rem;
    background: var(--color-bg-secondary);
    border-radius: var(--radius-md);
    border: 1px solid var(--color-border);
    box-shadow: var(--shadow-sm);
  }

  .table-of-contents > a {
    display: block;
    line-height: 1.8;
    font-size: 0.95rem;
    font-weight: 500;
    text-decoration: none;
    color: var(--color-text);
    padding: 0.4rem 0;
    border-radius: var(--radius-sm);
    transition: all 0.3s ease;
  }

  .table-of-contents > a:hover {
    background: rgba(var(--accent), 0.05) !important;
    color: var(--color-primary);
    padding-left: 0.5rem;
  }

  .table-of-contents > a.indent-1 {
    padding-left: 1.5rem;
  }

  .table-of-contents > a.indent-1:hover {
    padding-left: 2rem;
  }

  .table-of-contents > a.indent-2 {
    padding-left: 3rem;
    font-size: 0.9rem;
    opacity: 0.9;
  }

  .table-of-contents > a.indent-2:hover {
    padding-left: 3.5rem;
  }

  /* カラーバリエーション */
  .table-of-contents > a.gray {
    color: #9e9e9e;
  }
  .table-of-contents > a.brown {
    color: #795548;
  }
  .table-of-contents > a.orange {
    color: #ff9800;
  }
  .table-of-contents > a.yellow {
    color: #ffc107;
  }
  .table-of-contents > a.green {
    color: var(--color-primary);
  }
  .table-of-contents > a.blue {
    color: #2196f3;
  }
  .table-of-contents > a.purple {
    color: #9c27b0;
  }
  .table-of-contents > a.pink {
    color: #e91e63;
  }
  .table-of-contents > a.red {
    color: #f44336;
  }

  @media (max-width: 640px) {
    .table-of-contents {
      margin: 1rem 0;
      padding: 1rem;
    }

    .table-of-contents > a {
      font-size: 0.9rem;
      padding: 0.3rem 0;
    }

    .table-of-contents > a.indent-2 {
      font-size: 0.85rem;
    }
  }
</style>
