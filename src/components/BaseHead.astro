---
import { SITE_TITLE, SITE_DESCRIPTION } from '../server-constants';
import type { Post } from '../lib/interfaces';

export interface Props {
  title?: string;
  description?: string;
  iconPath?: string;
  coverImageURL?: string;
  post?: Post;
  ogImage?: string | URL;
  siteURL?: string;
}

const {
  title = SITE_TITLE,
  description = SITE_DESCRIPTION,
  iconPath,
  coverImageURL,
  post,
  ogImage,
  siteURL,
} = Astro.props;

const ogImageURL = ogImage || post?.FeaturedImage?.Url || coverImageURL;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<script>
  const fontFamily = import.meta.env.FONT_FAMILY;
  if (fontFamily) {
    document.documentElement.style.setProperty(
      '--font-family-default',
      `var(--font-family-${fontFamily.toLowerCase()})`
    );
  }
</script>
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/jpeg" href={iconPath || '/favicon.ico'} />
<meta name="generator" content={Astro.generator} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
{ogImageURL && <meta property="og:image" content={ogImageURL} />}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
{ogImageURL && <meta property="twitter:image" content={ogImageURL} />}

<!-- Sitemap -->
<link rel="sitemap" href="/sitemap-index.xml" />

<style>
  /* Global styles */
  :root {
    --accent: #2337ff;
    --accent-dark: #000d8a;
    --black: 15, 18, 25;
    --gray: 96, 115, 159;
    --gray-light: 229, 233, 240;
    --gray-dark: 34, 41, 57;
    --gray-gradient: rgba(var(--gray-light), 50%), #fff;
    --box-shadow: 0 2px 6px rgba(var(--gray), 25%), 0 8px 24px rgba(var(--gray), 33%);
    --box-shadow-light: 0 1px 3px rgba(var(--gray), 15%);
  }
  body {
    font-family: system-ui, sans-serif;
    margin: 0;
    padding: 0;
    text-align: left;
    background: linear-gradient(var(--gray-gradient)) no-repeat;
    background-size: 100% 600px;
    word-wrap: break-word;
    overflow-wrap: break-word;
    color: rgb(var(--gray-dark));
    font-size: 16px;
    line-height: 1.7;
  }
  main {
    width: 100%;
    max-width: calc(100% - 2em);
    margin: 0 auto;
    padding: 3em 1em;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: 0 0 0.5rem 0;
    color: rgb(var(--black));
    line-height: 1.2;
  }
  h1 {
    font-size: 2.5em;
  }
  h2 {
    font-size: 2em;
  }
  h3 {
    font-size: 1.75em;
  }
  h4 {
    font-size: 1.5em;
  }
  h5 {
    font-size: 1.25em;
  }
  strong,
  b {
    font-weight: 700;
  }
  a {
    color: var(--accent);
    text-decoration: none;
  }
  a:hover {
    color: var(--accent);
    text-decoration: underline;
  }
  p {
    margin-bottom: 1em;
  }
  .prose p {
    margin-bottom: 2em;
  }
  textarea {
    width: 100%;
    font-size: 16px;
  }
  input {
    font-size: 16px;
  }
  table {
    width: 100%;
    }
  img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
  }
  code {
    padding: 2px 5px;
    background-color: rgb(var(--gray-light));
    border-radius: 2px;
  }
  pre {
    padding: 1.5em;
    border-radius: 8px;
  }
  pre > code {
    all: unset;
  }
  blockquote {
    border-left: 4px solid var(--accent);
    padding: 0 0 0 20px;
    margin: 0px;
    font-size: 1.333em;
  }
  hr {
    border: none;
    border-top: 1px solid rgb(var(--gray-light));
  }
  @media (max-width: 720px) {
    body {
      font-size: 14px;
    }
    main {
      padding: 1em;
    }
  }
</style>