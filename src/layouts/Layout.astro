---
import { PUBLIC_GA_TRACKING_ID, ENABLE_LIGHTBOX } from '../server-constants.ts'
import { getDatabase } from '../lib/notion/client.ts'
import { getNavLink, getStaticFilePath } from '../lib/blog-helpers.ts'
import '../styles/syntax-coloring.css'
import '../styles/global.css'
import GoogleAnalytics from '../components/GoogleAnalytics.astro'
import SearchModal from '../components/SearchModal.astro'
import SearchButton from '../components/SearchButton.astro'
import { Image } from 'astro:assets'
import BaseHead from '../components/BaseHead.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import Breadcrumbs from '../components/Breadcrumbs.astro'
import { SITE_TITLE, SITE_DESCRIPTION } from '../server-constants'
import type { Post } from '../lib/interfaces'
import SidebarToggle from '../components/SidebarToggle.astro'
import LocalFontLoader from '../components/LocalFontLoader.astro'
import ThemeToggle from '../components/ThemeToggle.astro'

export interface Props {
  title: string
  description: string
  path: string
  ogImage: string
  post?: Post
}

const {
  title = SITE_TITLE,
  description = SITE_DESCRIPTION,
  path = '/',
  ogImage = '',
  post,
} = Astro.props

const database = await getDatabase()
const siteTitle = title ? `${title} - ${database.Title}` : database.Title
const siteDescription = description ? description : database.Description
const siteURL = new URL(getNavLink(path), Astro.site).toString()
const siteOGImage = new URL(getStaticFilePath('/default-og-image.png'), Astro.site)
const iconPath = '/icon.jpg'
const coverImageURL = database.Cover?.Url || undefined
---

<!DOCTYPE html>
<html lang="ja" prefix="og: https://ogp.me/ns#">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <BaseHead
      title={siteTitle}
      description={siteDescription}
      iconPath="/icon.jpg"
      coverImageURL={coverImageURL}
      post={post}
      ogImage={ogImage || siteOGImage}
      siteURL={siteURL}
    />
    <GoogleAnalytics />
    <script is:inline>
      // 初期テーマの設定
      function applyTheme(theme) {
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      }

      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();

      // 即座にテーマを適用
      applyTheme(theme);
    </script>
    <LocalFontLoader />
  </head>
  <body>
    <div class="layout">
      <Header title={database.Title} iconPath={iconPath} />
      <SidebarToggle />

      {coverImageURL && (
        <div class="hero">
          <Image
            src={coverImageURL}
            alt="Cover Image"
            width={1920}
            height={480}
            format="webp"
            loading="eager"
            class="hero-image"
          />
        </div>
      )}

      <Breadcrumbs />

      <div class="container">
        <main>
          <slot name="main" />
        </main>

        <aside>
          <div class="sidebar-content">
            <ThemeToggle />
            <SearchButton />
            <slot name="aside" />
          </div>
        </aside>
      </div>

      <Footer />
    </div>

    <div class="sidebar-overlay"></div>

    <SearchModal />
    {ENABLE_LIGHTBOX && <script src={getStaticFilePath('/scripts/fslightbox.js')} />}

    <style>
      .layout {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
      }

      .hero {
        width: 100%;
        height: min(360px, 30vh);
        overflow: hidden;
        background: transparent;
      }

      .hero-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .container {
        flex: 1;
        display: grid;
        grid-template-columns: minmax(0, 1fr) 320px;
        gap: 3rem;
        width: min(1280px, 100% - 4rem);
        margin-inline: auto;
        padding: 3rem 0;
        background: transparent;
      }

      main {
        min-width: 0;
        max-width: 800px;
        background: transparent;
      }

      aside {
        width: 320px;
      }

      .sidebar-content {
        position: sticky;
        top: 2rem;
        padding: 2rem;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-sm);
        backdrop-filter: blur(8px);
      }

      @media (max-width: 1200px) {
        .container {
          grid-template-columns: minmax(0, 1fr) 280px;
          gap: 2.5rem;
          width: min(1024px, 100% - 3rem);
          padding: 2.5rem 0;
        }

        aside {
          width: 280px;
        }

        .sidebar-content {
          padding: 1.5rem;
        }
      }

      @media (max-width: 960px) {
        .container {
          grid-template-columns: 1fr;
          width: min(720px, 100% - 3rem);
          gap: 2rem;
          padding: 2rem 0;
        }

        main {
          max-width: 100%;
        }

        aside {
          position: fixed;
          top: 0;
          right: -320px;
          width: 320px;
          height: 100vh;
          margin: 0;
          z-index: 150;
          background: transparent;
          transition: transform 0.3s ease;
        }

        .sidebar-content {
          height: 100%;
          overflow-y: auto;
          padding: 4rem 1.5rem 1.5rem;
          position: relative;
          border: none;
          border-radius: 0;
          box-shadow: -2px 0 8px rgba(0, 0, 0, 0.1);
        }

        .layout.sidebar-open aside {
          transform: translateX(-320px);
        }
      }

      @media (max-width: 640px) {
        .hero {
          height: min(240px, 25vh);
        }

        .container {
          width: min(100%, 100% - 2rem);
          gap: 1.5rem;
          padding: 1.5rem 0;
        }

        .sidebar-content {
          padding: 1.25rem;
          border-radius: var(--radius-md);
        }
      }

      @media (max-width: 480px) {
        .container {
          width: calc(100% - 1.5rem);
          gap: 1.25rem;
          padding: 1.25rem 0;
        }

        aside {
          right: -280px;
          width: 280px;
        }

        .layout.sidebar-open aside {
          transform: translateX(-280px);
        }

        .sidebar-content {
          padding: 4rem 1rem 1rem;
        }
      }

      /* Content Styles */
      :global(.content h1) {
        font-size: var(--text-2xl);
        line-height: 1.3;
        margin: 2rem 0 1.25rem;
        color: var(--color-text-heading);
      }

      :global(.content h2) {
        font-size: var(--text-xl);
        line-height: 1.4;
        margin: 1.75rem 0 1rem;
        color: var(--color-text-heading);
      }

      :global(.content h3) {
        font-size: var(--text-lg);
        line-height: 1.5;
        margin: 1.5rem 0 0.75rem;
        color: var(--color-text-heading);
      }

      :global(.content p) {
        margin-bottom: 1.5rem;
        line-height: 1.8;
      }

      :global(.content ul),
      :global(.content ol) {
        margin: 1.25rem 0;
        padding-left: 1.5rem;
      }

      :global(.content li) {
        margin: 0.5rem 0;
        line-height: 1.7;
      }

      :global(.content img) {
        margin: 2rem auto;
        border-radius: var(--radius-md);
        box-shadow: var(--shadow-sm);
      }

      :global(.content pre) {
        margin: 1.5rem 0;
        padding: 1.25rem;
        border-radius: var(--radius-md);
        background: var(--color-code-bg);
        overflow-x: auto;
      }

      :global(.content code) {
        font-family: var(--font-mono);
        font-size: 0.9em;
        color: var(--color-code);
        padding: 0.2em 0.4em;
        border-radius: var(--radius-sm);
        background: var(--color-code-inline-bg);
      }

      :global(.content blockquote) {
        margin: 2rem 0;
        padding: 1rem 1.5rem;
        border-left: 4px solid var(--color-primary);
        background: var(--color-bg-dark);
        border-radius: var(--radius-sm);
      }

      :global(.content hr) {
        margin: 3rem 0;
        border: 0;
        border-top: 1px solid var(--color-border);
      }

      .sidebar-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 140;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .layout.sidebar-open .sidebar-overlay {
        display: block;
        opacity: 1;
      }

      :global(.theme-toggle) {
        width: 100%;
        padding: 0.75rem 1rem;
        margin-bottom: 1rem;
        background: var(--color-background);
        border: 2px solid var(--color-border);
        border-radius: var(--radius-md);
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        transition: all 0.2s ease;
      }

      :global(.theme-toggle:hover) {
        background: var(--color-background-alt);
        border-color: var(--color-primary);
        transform: translateY(-1px);
        box-shadow: var(--shadow-sm);
      }
    </style>

    <style is:global>
      :root {
        --color-bg: #ffffff;
        --color-bg-dark: #f3f4f6;
        --color-text: #374151;
        --color-text-light: #6b7280;
        --color-text-heading: #111827;
        --color-border: #e5e7eb;
        --color-primary: #2563eb;
        --color-primary-dark: #1d4ed8;
        --color-code: #ef4444;
        --color-code-bg: #f9fafb;
        --color-code-inline-bg: #f3f4f6;

        --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
        --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;

        --text-sm: 0.875rem;
        --text-base: 1rem;
        --text-lg: 1.125rem;
        --text-xl: 1.25rem;
        --text-2xl: 1.5rem;
        --text-3xl: 1.875rem;

        --radius-sm: 0.25rem;
        --radius-md: 0.5rem;
        --radius-lg: 0.75rem;

        --shadow-sm: 0 1px 3px 0 rgb(0 0 0 / 0.1);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);

        --accent: 124, 58, 237;
        --accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
      }

      *, *::before, *::after {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: var(--font-sans);
        color: var(--color-text);
        line-height: 1.5;
        -webkit-font-smoothing: antialiased;
      }

      img {
        max-width: 100%;
        height: auto;
      }

      a {
        color: inherit;
        text-decoration: none;
      }

      html {
        font-family: system-ui, sans-serif;
        background-color: #F6F6F6;
      }

      code {
        font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
          Bitstream Vera Sans Mono, Courier New, monospace;
      }
    </style>

    <script>
      const overlay = document.querySelector('.sidebar-overlay');
      const layout = document.querySelector('.layout');

      overlay?.addEventListener('click', () => {
        layout?.classList.remove('sidebar-open');
      });
    </script>
    <style is:global>
      html, body {
        background-color: transparent !important;
      }
    </style>
    <style is:global>
      :root {
        --color-background: transparent !important;
      }
    </style>
  </body>
</html>
