---
import Layout from '../layouts/Layout.astro'
import styles from '../styles/page.module.css'

const title = 'お問い合わせ'
const description = '当サイトへのお問い合わせはこちらのフォームからお願いいたします。'
const ogImage = new URL('/ogp.png', Astro.site).toString()

// Turnstileのサイトキーを環境変数から取得
const TURNSTILE_SITE_KEY = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY
---

<Layout title={title} description={description} path="/contact" ogImage={ogImage}>
  <div slot="main" class={styles.main}>
    <h1>お問い合わせ</h1>

    <section class={styles.section}>
      <div class="intro">
        <h2>お問い合わせについて</h2>
        <ul class="notice-list">
          <li>通常2-3営業日以内にご返信いたします</li>
          <li>土日祝日、年末年始は返信が遅れる場合があります</li>
          <li>必須項目は<span class="required">*</span>マークが付いています</li>
        </ul>
      </div>

      <form 
        class="form" 
        id="contactForm"
        name="contact"
        method="POST"
        action="/api/contact"
      >
        <div class="formGroup">
          <label for="name">
            お名前 <span class="required">*</span>
            <span class="hint">（例：山田太郎）</span>
          </label>
          <input 
            type="text" 
            id="name" 
            name="name" 
            required 
            placeholder="お名前を入力してください"
            aria-required="true"
          />
        </div>

        <div class="formGroup">
          <label for="email">
            メールアドレス <span class="required">*</span>
            <span class="hint">（例：example@email.com）</span>
          </label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            required 
            placeholder="メールアドレスを入力してください"
            aria-required="true"
          />
        </div>

        <div class="formGroup">
          <label for="subject">
            件名 <span class="required">*</span>
            <span class="hint">（例：記事の内容について）</span>
          </label>
          <input 
            type="text" 
            id="subject" 
            name="subject" 
            required 
            placeholder="件名を入力してください"
            aria-required="true"
          />
        </div>

        <div class="formGroup">
          <label for="message">
            メッセージ <span class="required">*</span>
            <span class="hint">（具体的な内容をご記入ください）</span>
          </label>
          <textarea 
            id="message" 
            name="message" 
            rows="8" 
            required 
            placeholder="メッセージを入力してください"
            aria-required="true"
          ></textarea>
        </div>

        <div class="formGroup privacy-notice">
          <p>
            ※お問い合わせの際は<a href="/privacy-policy">プライバシーポリシー</a>をご確認ください。
            送信をもって同意いただいたものとします。
          </p>
        </div>

        <!-- Turnstileウィジェット -->
        <div class="formGroup">
          <div
            class="cf-turnstile"
            data-sitekey={TURNSTILE_SITE_KEY}
            data-theme="light"
          ></div>
        </div>

        <div class="formGroup">
          <button type="submit" class="submitButton">
            送信する
          </button>
        </div>
      </form>

      <div id="toast" class="toast" role="alert" aria-live="polite">
        送信完了しました。お問い合わせありがとうございます。
      </div>
    </section>
  </div>
</Layout>

<!-- Turnstileスクリプト -->
<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>

<script>
  const form = document.getElementById('contactForm') as HTMLFormElement;
  const toast = document.getElementById('toast');

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      try {
        const formData = new FormData(form);
        const turnstileResponse = formData.get('cf-turnstile-response');
        
        if (!turnstileResponse) {
          throw new Error('認証を完了してください');
        }

        const response = await fetch('/api/contact', {
          method: 'POST',
          body: formData
        });

        if (!response.ok) {
          throw new Error('送信に失敗しました');
        }

        // フォームをリセット
        form.reset();
        // Turnstileをリセット
        turnstile.reset();

        // 完了メッセージを表示
        if (toast) {
          toast.classList.add('show');
          setTimeout(() => {
            toast.classList.remove('show');
          }, 3000);
        }
      } catch (error) {
        console.error('Error:', error);
        if (toast) {
          toast.textContent = error.message || 'エラーが発生しました。時間をおいて再度お試しください。';
          toast.classList.add('show', 'error');
          setTimeout(() => {
            toast.classList.remove('show', 'error');
          }, 3000);
        }
      }
    });
  }
</script>

<style>
  .form {
    max-width: 600px;
    margin: 2rem auto;
  }

  .formGroup {
    margin-bottom: 1.5rem;
  }

  .formGroup label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
  }

  .hint {
    font-size: 0.9rem;
    color: var(--color-text-light);
    margin-left: 0.5rem;
    font-weight: normal;
  }

  .required {
    color: #e53e3e;
    margin-left: 0.25rem;
  }

  .formGroup input,
  .formGroup textarea {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid var(--color-border);
    border-radius: var(--radius-md);
    background: var(--color-bg);
    color: var(--color-text);
    font-size: 1rem;
    transition: all 0.2s ease;
  }

  .formGroup input:focus,
  .formGroup textarea:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }

  .formGroup input::placeholder,
  .formGroup textarea::placeholder {
    color: var(--color-text-light);
  }

  .privacy-notice {
    font-size: 0.9rem;
    color: var(--color-text-light);
    text-align: center;
  }

  .privacy-notice a {
    color: var(--color-primary);
    text-decoration: none;
  }

  .privacy-notice a:hover {
    text-decoration: underline;
  }

  .submitButton {
    display: inline-block;
    width: 100%;
    padding: 1rem 2rem;
    background: var(--color-primary);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .submitButton:hover {
    background: var(--color-primary-dark);
  }

  /* Turnstileウィジェットのスタイル */
  .cf-turnstile {
    margin: 1rem 0;
    display: flex;
    justify-content: center;
  }

  @media (max-width: 640px) {
    .intro {
      padding: 1rem;
      margin-bottom: 1.5rem;
    }

    .form {
      margin: 1.5rem auto;
    }

    .formGroup {
      margin-bottom: 1rem;
    }

    .formGroup input,
    .formGroup textarea {
      padding: 0.75rem;
      font-size: 1rem;
    }

    .hint {
      display: block;
      margin-left: 0;
      margin-top: 0.25rem;
    }
  }

  .toast {
    position: fixed;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%) translateY(100%);
    background: var(--color-primary);
    color: white;
    padding: 1rem 2rem;
    border-radius: var(--radius-md);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 1000;
    text-align: center;
    max-width: 90%;
    width: auto;
  }

  .toast.show {
    transform: translateX(-50%) translateY(0);
    opacity: 1;
    visibility: visible;
  }

  .toast.error {
    background: #e53e3e;
  }

  @media (max-width: 640px) {
    .toast {
      bottom: 1rem;
      padding: 0.75rem 1.5rem;
      font-size: 0.95rem;
    }
  }
</style> 